| In this lesson, we'll see how to extract elements from a vector
| based on some conditions that we specify.

...

  |==                                                           |   3%
| For example, we may only be interested in the first 20 elements of a
| vector, or only the elements that are not NA, or only those that are
| positive or correspond to a specific variable of interest. By the
| end of this lesson, you'll know how to handle each of these
| scenarios.

...

  |===                                                          |   5%
| I've created for you a vector called x that contains a random
| ordering of 20 numbers (from a standard normal distribution) and 20
| NAs. Type x now to see what it looks like.

> x
 [1]  1.24407677          NA          NA  0.21178113 -2.36390181
 [6] -1.78722109          NA  1.08089521          NA -0.99274200
[11]          NA -1.62157684 -2.38192369  1.53431126          NA
[16]          NA          NA  0.61976543          NA          NA
[21]  0.02904345          NA -0.10497738          NA          NA
[26] -0.74094218  1.58590588 -1.10668192 -1.38997908          NA
[31]          NA  1.00711524  2.04418802  0.81171924          NA
[36]          NA          NA -0.79877641          NA          NA

| Keep up the great work!

  |=====                                                        |   8%
| The way you tell R that you want to select some particular elements
| (i.e. a 'subset') from a vector is by placing an 'index vector' in
| square brackets immediately following the name of the vector.

...

  |======                                                       |  10%
| For a simple example, try x[1:10] to view the first ten elements of
| x.

> x[1:10]
 [1]  1.2440768         NA         NA  0.2117811 -2.3639018 -1.7872211
 [7]         NA  1.0808952         NA -0.9927420

| Excellent work!

  |========                                                     |  13%
| Index vectors come in four different flavors -- logical vectors,
| vectors of positive integers, vectors of negative integers, and
| vectors of character strings -- each of which we'll cover in this
| lesson.

...

  |=========                                                    |  15%
| Let's start by indexing with logical vectors. One common scenario
| when working with real-world data is that we want to extract all
| elements of a vector that are not NA (i.e. missing data). Recall
| that is.na(x) yields a vector of logical values the same length as
| x, with TRUEs corresponding to NA values in x and FALSEs
| corresponding to non-NA values in x.

...

  |===========                                                  |  18%
| What do you think x[is.na(x)] will give you?

1: A vector of length 0
2: A vector of TRUEs and FALSEs
3: A vector with no NAs
4: A vector of all NAs

Selection: 2

| Nice try, but that's not exactly what I was hoping for. Try again.

| Remember that is.na(x) tells us where the NAs are in a vector. So if
| we subset x based on that, what do you expect to happen?

1: A vector with no NAs
2: A vector of TRUEs and FALSEs
3: A vector of all NAs
4: A vector of length 0

Selection: 3

| Excellent job!

  |=============                                                |  21%
| Prove it to yourself by typing x[is.na(x)].

> x[is.na(x)]
 [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA

| Your dedication is inspiring!

  |==============                                               |  23%
| Recall that `!` gives us the negation of a logical expression, so
| !is.na(x) can be read as 'is not NA'. Therefore, if we want to
| create a vector called y that contains all of the non-NA values from
| x, we can use y <- x[!is.na(x)]. Give it a try.

> y <- x[!is.na(x)]

| Excellent work!

  |================                                             |  26%
| Print y to the console.

> y
 [1]  1.24407677  0.21178113 -2.36390181 -1.78722109  1.08089521
 [6] -0.99274200 -1.62157684 -2.38192369  1.53431126  0.61976543
[11]  0.02904345 -0.10497738 -0.74094218  1.58590588 -1.10668192
[16] -1.38997908  1.00711524  2.04418802  0.81171924 -0.79877641

| All that practice is paying off!

  |=================                                            |  28%
| Now that we've isolated the non-missing values of x and put them in
| y, we can subset y as we please.

...

  |===================                                          |  31%
| Recall that the expression y > 0 will give us a vector of logical
| values the same length as y, with TRUEs corresponding to values of y
| that are greater than zero and FALSEs corresponding to values of y
| that are less than or equal to zero. What do you think y[y > 0] will
| give you?

1: A vector of length 0
2: A vector of TRUEs and FALSEs
3: A vector of all the positive elements of y
4: A vector of all NAs
5: A vector of all the negative elements of y

Selection: 3

| All that hard work is paying off!

  |====================                                         |  33%
| Type y[y > 0] to see that we get all of the positive elements of y,
| which are also the positive elements of our original vector x.

> y[y>0]
 [1] 1.24407677 0.21178113 1.08089521 1.53431126 0.61976543 0.02904345
 [7] 1.58590588 1.00711524 2.04418802 0.81171924

| You are amazing!

  |======================                                       |  36%
| You might wonder why we didn't just start with x[x > 0] to isolate
| the positive elements of x. Try that now to see why.

> x[x>0]
 [1] 1.24407677         NA         NA 0.21178113         NA 1.08089521
 [7]         NA         NA 1.53431126         NA         NA         NA
[13] 0.61976543         NA         NA 0.02904345         NA         NA
[19]         NA 1.58590588         NA         NA 1.00711524 2.04418802
[25] 0.81171924         NA         NA         NA         NA         NA

| Nice work!

  |=======================                                      |  38%
| Since NA is not a value, but rather a placeholder for an unknown
| quantity, the expression NA > 0 evaluates to NA. Hence we get a
| bunch of NAs mixed in with our positive numbers when we do this.

...

  |=========================                                    |  41%
| Combining our knowledge of logical operators with our new knowledge
| of subsetting, we could do this -- x[!is.na(x) & x > 0]. Try it out.

> x[!is.na(x) & x>0]
 [1] 1.24407677 0.21178113 1.08089521 1.53431126 0.61976543 0.02904345
 [7] 1.58590588 1.00711524 2.04418802 0.81171924

| You are quite good my friend!

  |===========================                                  |  44%
| In this case, we request only values of x that are both non-missing
| AND greater than zero.

...

  |============================                                 |  46%
| I've already shown you how to subset just the first ten values of x
| using x[1:10]. In this case, we're providing a vector of positive
| integers inside of the square brackets, which tells R to return only
| the elements of x numbered 1 through 10.

...

  |==============================                               |  49%
| Many programming languages use what's called 'zero-based indexing',
| which means that the first element of a vector is considered element
| 0. R uses 'one-based indexing', which (you guessed it!) means the
| first element of a vector is considered element 1.

...

  |===============================                              |  51%
| Can you figure out how we'd subset the 3rd, 5th, and 7th elements of
| x? Hint -- Use the c() function to specify the element numbers as a
| numeric vector.

> x[c(3, 5, 7)]
[1]        NA -2.363902        NA

| Great job!

  |=================================                            |  54%
| It's important that when using integer vectors to subset our vector
| x, we stick with the set of indexes {1, 2, ..., 40} since x only has
| 40 elements. What happens if we ask for the zeroth element of x
| (i.e. x[0])? Give it a try.

> x[0]
numeric(0)

| You are doing so well!

  |==================================                           |  56%
| As you might expect, we get nothing useful. Unfortunately, R doesn't
| prevent us from doing this. What if we ask for the 3000th element of
| x? Try it out.

> x[3000]
[1] NA

| You're the best!

  |====================================                         |  59%
| Again, nothing useful, but R doesn't prevent us from asking for it.
| This should be a cautionary tale. You should always make sure that
| what you are asking for is within the bounds of the vector you're
| working with.

...

  |======================================                       |  62%
| What if we're interested in all elements of x EXCEPT the 2nd and
| 10th? It would be pretty tedious to construct a vector containing
| all numbers 1 through 40 EXCEPT 2 and 10.

...

  |=======================================                      |  64%
| Luckily, R accepts negative integer indexes. Whereas x[c(2, 10)]
| gives us ONLY the 2nd and 10th elements of x, x[c(-2, -10)] gives us
| all elements of x EXCEPT for the 2nd and 10 elements.  Try x[c(-2,
| -10)] now to see this.

> x[c(-2, -10)]
 [1]  1.24407677          NA  0.21178113 -2.36390181 -1.78722109
 [6]          NA  1.08089521          NA          NA -1.62157684
[11] -2.38192369  1.53431126          NA          NA          NA
[16]  0.61976543          NA          NA  0.02904345          NA
[21] -0.10497738          NA          NA -0.74094218  1.58590588
[26] -1.10668192 -1.38997908          NA          NA  1.00711524
[31]  2.04418802  0.81171924          NA          NA          NA
[36] -0.79877641          NA          NA

| Great job!

  |=========================================                    |  67%
| A shorthand way of specifying multiple negative numbers is to put
| the negative sign out in front of the vector of positive numbers.
| Type x[-c(2, 10)] to get the exact same result.

> x[-c(2, 10)]
 [1]  1.24407677          NA  0.21178113 -2.36390181 -1.78722109
 [6]          NA  1.08089521          NA          NA -1.62157684
[11] -2.38192369  1.53431126          NA          NA          NA
[16]  0.61976543          NA          NA  0.02904345          NA
[21] -0.10497738          NA          NA -0.74094218  1.58590588
[26] -1.10668192 -1.38997908          NA          NA  1.00711524
[31]  2.04418802  0.81171924          NA          NA          NA
[36] -0.79877641          NA          NA

| You are really on a roll!

  |==========================================                   |  69%
| So far, we've covered three types of index vectors -- logical,
| positive integer, and negative integer. The only remaining type
| requires us to introduce the concept of 'named' elements.

...

  |============================================                 |  72%
| Create a numeric vector with three named elements using vect <-
| c(foo = 11, bar = 2, norf = NA).

> vect <- c(foo = 11, bar = 2, norf = NA)

| All that hard work is paying off!

  |=============================================                |  74%
| When we print vect to the console, you'll see that each element has
| a name. Try it out.

> vect
 foo  bar norf
  11    2   NA

| You are quite good my friend!

  |===============================================              |  77%
| We can also get the names of vect by passing vect as an argument to
| the names() function. Give that a try.

> names(vect)
[1] "foo"  "bar"  "norf"

| You nailed it! Good job!

  |================================================             |  79%
| Alternatively, we can create an unnamed vector vect2 with c(11, 2,
| NA). Do that now.

> vect2 <- c(11, 2, NA)

| You are amazing!

  |==================================================           |  82%
| Then, we can add the `names` attribute to vect2 after the fact with
| names(vect2) <- c("foo", "bar", "norf"). Go ahead.

> names(vect2) <- c("foo", "bar", "norf")

| You are quite good my friend!

  |====================================================         |  85%
| Now, let's check that vect and vect2 are the same by passing them as
| arguments to the identical() function.

> indentical(vect, vect2)
Error in indentical(vect, vect2) : could not find function "indentical"
> identical
function (x, y, num.eq = TRUE, single.NA = TRUE, attrib.as.set = TRUE,
    ignore.bytecode = TRUE, ignore.environment = FALSE, ignore.srcref = TRUE)
.Internal(identical(x, y, num.eq, single.NA, attrib.as.set, ignore.bytecode,
    ignore.environment, ignore.srcref))
<bytecode: 0x00000121a28c3c40>
<environment: namespace:base>

| One more time. You can do it! Or, type info() for more options.

| The identical() function tells us if its first two arguments are,
| well, identical.

> identical(vect, vect2)
[1] TRUE

| You are quite good my friend!

  |=====================================================        |  87%
| Indeed, vect and vect2 are identical named vectors.

...

  |=======================================================      |  90%
| Now, back to the matter of subsetting a vector by named elements.
| Which of the following commands do you think would give us the
| second element of vect?

1: vect["bar"]
2: vect[bar]
3: vect["2"]

Selection: 1

| Your dedication is inspiring!

  |========================================================     |  92%
| Now, try it out.

> vect["bar"]
bar
  2

| Keep working like that and you'll get there!

  |==========================================================   |  95%
| Likewise, we can specify a vector of names with vect[c("foo",
| "bar")]. Try it out.

> vect[c("foo", "bar")]
foo bar
 11   2

| That's the answer I was looking for.

  |===========================================================  |  97%
| Now you know all four methods of subsetting data from vectors.
| Different approaches are best in different scenarios and when in
| doubt, try it out!

...
